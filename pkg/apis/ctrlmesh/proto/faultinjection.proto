syntax = "proto3";
option go_package = "github.com/KusionStack/controller-mesh/pkg/apis/ctrlmesh/proto";
package proto;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "google/protobuf/duration.proto";

service FaultInject {
  rpc SendConfig(FaultInjection) returns (FaultInjectConfigResp);
}

message FaultInjectConfigResp {
  bool success = 1;
  string message = 2;
  repeated FaultInjectionSnapshot faultInjectionSnapshots = 3;
}

message FaultInjectionSnapshot {
  string limitingName = 1;

  FaultInjectionState state = 2;

  k8s.io.apimachinery.pkg.apis.meta.v1.Time recoverTime = 3;
  k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;
}

enum FaultInjectionState {
  STATEOPENED = 0;
  STATECLOSED = 1;
}

message FaultInjection {
  repeated HTTPFaultInjection httpFaultInjections = 1;

  Option option = 2;
  enum Option {
    UPDATE = 0;
    DELETE = 1;
    CHECK = 2;
    RECOVER = 3;
  }
  string configHash = 3;
  string name = 4;
}

message HTTPFaultInjection {
  // Delay requests before forwarding, emulating various failures such as
  // network issues, overloaded upstream service, etc.
  Delay delay = 1;

  // Abort Http request attempts and return error codes back to downstream
  // service, giving the impression that the upstream service is faulty.
  Abort abort = 2;

  HTTPMatchRequest match = 3;

  string Name = 4;

  message Delay {
    // Percentage of requests on which the delay will be injected (0-100).
    // Use of integer `percent` value is deprecated. Use the double `percentage`
    // field instead.
    double percent = 1;

    oneof http_delay_type {
      // Add a fixed delay before forwarding the request. Format:
      // 1h/1m/1s/1ms. MUST be >=1ms.
      google.protobuf.Duration fixed_delay = 2;

      // google.protobuf.Duration exponential_delay = 3 ;
    }
  }

  message Abort {

    double percent = 1;

    oneof error_type {
      // HTTP status code to use to abort the Http request.
      int32 http_status = 2;

      // GRPC status code to use to abort the request. The supported
      // codes are documented in
      // https://github.com/grpc/grpc/blob/master/doc/statuscodes.md Note: If
      // you want to return the status "Unavailable", then you should specify
      // the code as `UNAVAILABLE`(all caps), but not `14`.
      string grpc_status = 3;

      // $hide_from_docs
      string http2_error = 4;
    }
  }
}

message MutiRestRule {
  repeated string url = 1;
  repeated string method = 2;
}

message HTTPMatchRequest {
  // The name assigned to a match. The match's name will be
  // concatenated with the parent route's name and will be logged in
  // the access logs for requests matching this route.
  string name = 1;

  //
  repeated ResourceMatch relatedResources = 2;
  repeated MutiRestRule restRules = 3;
}

// Describes how to match K8s resources.
//
// ```yaml
//  relatedResources:
//  - apiGroups:
//    - ""
//    namespaces:
//    - '*'
//    resources:
//    - pods
//    verbs:
//    - delete
// ```
message ResourceMatch {

  // `apiGroups` is a list of matching API groups and may not be empty.
  // "*" matches all API groups and, if present, must be the only entry.
  // +listType=set
  // Required.
  repeated string apiGroups = 1;

  repeated string namespaces = 3;
  repeated string resources = 4;

  // `verbs` is a list of matching verbs and may not be empty.
  // "*" matches all verbs and, if present, must be the only entry.
  // +listType=set
  // Required.
  repeated string verbs = 5;
}
