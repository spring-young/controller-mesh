// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: pkg/apis/ctrlmesh/proto/faultinjection.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FaultInjectionState int32

const (
	FaultInjectionState_STATEOPENED FaultInjectionState = 0
	FaultInjectionState_STATECLOSED FaultInjectionState = 1
)

// Enum value maps for FaultInjectionState.
var (
	FaultInjectionState_name = map[int32]string{
		0: "STATEOPENED",
		1: "STATECLOSED",
	}
	FaultInjectionState_value = map[string]int32{
		"STATEOPENED": 0,
		"STATECLOSED": 1,
	}
)

func (x FaultInjectionState) Enum() *FaultInjectionState {
	p := new(FaultInjectionState)
	*p = x
	return p
}

func (x FaultInjectionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FaultInjectionState) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_apis_ctrlmesh_proto_faultinjection_proto_enumTypes[0].Descriptor()
}

func (FaultInjectionState) Type() protoreflect.EnumType {
	return &file_pkg_apis_ctrlmesh_proto_faultinjection_proto_enumTypes[0]
}

func (x FaultInjectionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FaultInjectionState.Descriptor instead.
func (FaultInjectionState) EnumDescriptor() ([]byte, []int) {
	return file_pkg_apis_ctrlmesh_proto_faultinjection_proto_rawDescGZIP(), []int{0}
}

type FaultInjection_Option int32

const (
	FaultInjection_UPDATE  FaultInjection_Option = 0
	FaultInjection_DELETE  FaultInjection_Option = 1
	FaultInjection_CHECK   FaultInjection_Option = 2
	FaultInjection_RECOVER FaultInjection_Option = 3
)

// Enum value maps for FaultInjection_Option.
var (
	FaultInjection_Option_name = map[int32]string{
		0: "UPDATE",
		1: "DELETE",
		2: "CHECK",
		3: "RECOVER",
	}
	FaultInjection_Option_value = map[string]int32{
		"UPDATE":  0,
		"DELETE":  1,
		"CHECK":   2,
		"RECOVER": 3,
	}
)

func (x FaultInjection_Option) Enum() *FaultInjection_Option {
	p := new(FaultInjection_Option)
	*p = x
	return p
}

func (x FaultInjection_Option) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FaultInjection_Option) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_apis_ctrlmesh_proto_faultinjection_proto_enumTypes[1].Descriptor()
}

func (FaultInjection_Option) Type() protoreflect.EnumType {
	return &file_pkg_apis_ctrlmesh_proto_faultinjection_proto_enumTypes[1]
}

func (x FaultInjection_Option) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FaultInjection_Option.Descriptor instead.
func (FaultInjection_Option) EnumDescriptor() ([]byte, []int) {
	return file_pkg_apis_ctrlmesh_proto_faultinjection_proto_rawDescGZIP(), []int{2, 0}
}

type FaultInjectConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success                 bool                      `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message                 string                    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	FaultInjectionSnapshots []*FaultInjectionSnapshot `protobuf:"bytes,3,rep,name=faultInjectionSnapshots,proto3" json:"faultInjectionSnapshots,omitempty"`
}

func (x *FaultInjectConfigResp) Reset() {
	*x = FaultInjectConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaultInjectConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaultInjectConfigResp) ProtoMessage() {}

func (x *FaultInjectConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaultInjectConfigResp.ProtoReflect.Descriptor instead.
func (*FaultInjectConfigResp) Descriptor() ([]byte, []int) {
	return file_pkg_apis_ctrlmesh_proto_faultinjection_proto_rawDescGZIP(), []int{0}
}

func (x *FaultInjectConfigResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FaultInjectConfigResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FaultInjectConfigResp) GetFaultInjectionSnapshots() []*FaultInjectionSnapshot {
	if x != nil {
		return x.FaultInjectionSnapshots
	}
	return nil
}

type FaultInjectionSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LimitingName       string              `protobuf:"bytes,1,opt,name=limitingName,proto3" json:"limitingName,omitempty"`
	State              FaultInjectionState `protobuf:"varint,2,opt,name=state,proto3,enum=proto.FaultInjectionState" json:"state,omitempty"`
	RecoverTime        *v1.Time            `protobuf:"bytes,3,opt,name=recoverTime,proto3" json:"recoverTime,omitempty"`
	LastTransitionTime *v1.Time            `protobuf:"bytes,4,opt,name=lastTransitionTime,proto3" json:"lastTransitionTime,omitempty"`
}

func (x *FaultInjectionSnapshot) Reset() {
	*x = FaultInjectionSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaultInjectionSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaultInjectionSnapshot) ProtoMessage() {}

func (x *FaultInjectionSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaultInjectionSnapshot.ProtoReflect.Descriptor instead.
func (*FaultInjectionSnapshot) Descriptor() ([]byte, []int) {
	return file_pkg_apis_ctrlmesh_proto_faultinjection_proto_rawDescGZIP(), []int{1}
}

func (x *FaultInjectionSnapshot) GetLimitingName() string {
	if x != nil {
		return x.LimitingName
	}
	return ""
}

func (x *FaultInjectionSnapshot) GetState() FaultInjectionState {
	if x != nil {
		return x.State
	}
	return FaultInjectionState_STATEOPENED
}

func (x *FaultInjectionSnapshot) GetRecoverTime() *v1.Time {
	if x != nil {
		return x.RecoverTime
	}
	return nil
}

func (x *FaultInjectionSnapshot) GetLastTransitionTime() *v1.Time {
	if x != nil {
		return x.LastTransitionTime
	}
	return nil
}

type FaultInjection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpFaultInjections []*HTTPFaultInjection `protobuf:"bytes,1,rep,name=httpFaultInjections,proto3" json:"httpFaultInjections,omitempty"`
	Option              FaultInjection_Option `protobuf:"varint,2,opt,name=option,proto3,enum=proto.FaultInjection_Option" json:"option,omitempty"`
	ConfigHash          string                `protobuf:"bytes,3,opt,name=configHash,proto3" json:"configHash,omitempty"`
	Name                string                `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FaultInjection) Reset() {
	*x = FaultInjection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaultInjection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaultInjection) ProtoMessage() {}

func (x *FaultInjection) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaultInjection.ProtoReflect.Descriptor instead.
func (*FaultInjection) Descriptor() ([]byte, []int) {
	return file_pkg_apis_ctrlmesh_proto_faultinjection_proto_rawDescGZIP(), []int{2}
}

func (x *FaultInjection) GetHttpFaultInjections() []*HTTPFaultInjection {
	if x != nil {
		return x.HttpFaultInjections
	}
	return nil
}

func (x *FaultInjection) GetOption() FaultInjection_Option {
	if x != nil {
		return x.Option
	}
	return FaultInjection_UPDATE
}

func (x *FaultInjection) GetConfigHash() string {
	if x != nil {
		return x.ConfigHash
	}
	return ""
}

func (x *FaultInjection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type HTTPFaultInjection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Delay requests before forwarding, emulating various failures such as
	// network issues, overloaded upstream service, etc.
	Delay *HTTPFaultInjection_Delay `protobuf:"bytes,1,opt,name=delay,proto3" json:"delay,omitempty"`
	// Abort Http request attempts and return error codes back to downstream
	// service, giving the impression that the upstream service is faulty.
	Abort *HTTPFaultInjection_Abort `protobuf:"bytes,2,opt,name=abort,proto3" json:"abort,omitempty"`
	Match *HTTPMatchRequest         `protobuf:"bytes,3,opt,name=match,proto3" json:"match,omitempty"`
	Name  string                    `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *HTTPFaultInjection) Reset() {
	*x = HTTPFaultInjection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPFaultInjection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFaultInjection) ProtoMessage() {}

func (x *HTTPFaultInjection) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFaultInjection.ProtoReflect.Descriptor instead.
func (*HTTPFaultInjection) Descriptor() ([]byte, []int) {
	return file_pkg_apis_ctrlmesh_proto_faultinjection_proto_rawDescGZIP(), []int{3}
}

func (x *HTTPFaultInjection) GetDelay() *HTTPFaultInjection_Delay {
	if x != nil {
		return x.Delay
	}
	return nil
}

func (x *HTTPFaultInjection) GetAbort() *HTTPFaultInjection_Abort {
	if x != nil {
		return x.Abort
	}
	return nil
}

func (x *HTTPFaultInjection) GetMatch() *HTTPMatchRequest {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *HTTPFaultInjection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MutiRestRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    []string `protobuf:"bytes,1,rep,name=url,proto3" json:"url,omitempty"`
	Method []string `protobuf:"bytes,2,rep,name=method,proto3" json:"method,omitempty"`
}

func (x *MutiRestRule) Reset() {
	*x = MutiRestRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutiRestRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutiRestRule) ProtoMessage() {}

func (x *MutiRestRule) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutiRestRule.ProtoReflect.Descriptor instead.
func (*MutiRestRule) Descriptor() ([]byte, []int) {
	return file_pkg_apis_ctrlmesh_proto_faultinjection_proto_rawDescGZIP(), []int{4}
}

func (x *MutiRestRule) GetUrl() []string {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *MutiRestRule) GetMethod() []string {
	if x != nil {
		return x.Method
	}
	return nil
}

type HTTPMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name assigned to a match. The match's name will be
	// concatenated with the parent route's name and will be logged in
	// the access logs for requests matching this route.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RelatedResources []*ResourceMatch `protobuf:"bytes,2,rep,name=relatedResources,proto3" json:"relatedResources,omitempty"`
	RestRules        []*MutiRestRule  `protobuf:"bytes,3,rep,name=restRules,proto3" json:"restRules,omitempty"`
}

func (x *HTTPMatchRequest) Reset() {
	*x = HTTPMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPMatchRequest) ProtoMessage() {}

func (x *HTTPMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPMatchRequest.ProtoReflect.Descriptor instead.
func (*HTTPMatchRequest) Descriptor() ([]byte, []int) {
	return file_pkg_apis_ctrlmesh_proto_faultinjection_proto_rawDescGZIP(), []int{5}
}

func (x *HTTPMatchRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HTTPMatchRequest) GetRelatedResources() []*ResourceMatch {
	if x != nil {
		return x.RelatedResources
	}
	return nil
}

func (x *HTTPMatchRequest) GetRestRules() []*MutiRestRule {
	if x != nil {
		return x.RestRules
	}
	return nil
}

// Describes how to match K8s resources.
//
// ```yaml
//
//	relatedResources:
//	- apiGroups:
//	  - ""
//	  namespaces:
//	  - '*'
//	  resources:
//	  - pods
//	  verbs:
//	  - delete
//
// ```
type ResourceMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `apiGroups` is a list of matching API groups and may not be empty.
	// "*" matches all API groups and, if present, must be the only entry.
	// +listType=set
	// Required.
	ApiGroups  []string `protobuf:"bytes,1,rep,name=apiGroups,proto3" json:"apiGroups,omitempty"`
	Namespaces []string `protobuf:"bytes,3,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	Resources  []string `protobuf:"bytes,4,rep,name=resources,proto3" json:"resources,omitempty"`
	// `verbs` is a list of matching verbs and may not be empty.
	// "*" matches all verbs and, if present, must be the only entry.
	// +listType=set
	// Required.
	Verbs []string `protobuf:"bytes,5,rep,name=verbs,proto3" json:"verbs,omitempty"`
}

func (x *ResourceMatch) Reset() {
	*x = ResourceMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceMatch) ProtoMessage() {}

func (x *ResourceMatch) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceMatch.ProtoReflect.Descriptor instead.
func (*ResourceMatch) Descriptor() ([]byte, []int) {
	return file_pkg_apis_ctrlmesh_proto_faultinjection_proto_rawDescGZIP(), []int{6}
}

func (x *ResourceMatch) GetApiGroups() []string {
	if x != nil {
		return x.ApiGroups
	}
	return nil
}

func (x *ResourceMatch) GetNamespaces() []string {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *ResourceMatch) GetResources() []string {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ResourceMatch) GetVerbs() []string {
	if x != nil {
		return x.Verbs
	}
	return nil
}

type HTTPFaultInjection_Delay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Percentage of requests on which the delay will be injected (0-100).
	// Use of integer `percent` value is deprecated. Use the double `percentage`
	// field instead.
	Percent float64 `protobuf:"fixed64,1,opt,name=percent,proto3" json:"percent,omitempty"`
	// Types that are assignable to HttpDelayType:
	//
	//	*HTTPFaultInjection_Delay_FixedDelay
	HttpDelayType isHTTPFaultInjection_Delay_HttpDelayType `protobuf_oneof:"http_delay_type"`
}

func (x *HTTPFaultInjection_Delay) Reset() {
	*x = HTTPFaultInjection_Delay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPFaultInjection_Delay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFaultInjection_Delay) ProtoMessage() {}

func (x *HTTPFaultInjection_Delay) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFaultInjection_Delay.ProtoReflect.Descriptor instead.
func (*HTTPFaultInjection_Delay) Descriptor() ([]byte, []int) {
	return file_pkg_apis_ctrlmesh_proto_faultinjection_proto_rawDescGZIP(), []int{3, 0}
}

func (x *HTTPFaultInjection_Delay) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (m *HTTPFaultInjection_Delay) GetHttpDelayType() isHTTPFaultInjection_Delay_HttpDelayType {
	if m != nil {
		return m.HttpDelayType
	}
	return nil
}

func (x *HTTPFaultInjection_Delay) GetFixedDelay() *durationpb.Duration {
	if x, ok := x.GetHttpDelayType().(*HTTPFaultInjection_Delay_FixedDelay); ok {
		return x.FixedDelay
	}
	return nil
}

type isHTTPFaultInjection_Delay_HttpDelayType interface {
	isHTTPFaultInjection_Delay_HttpDelayType()
}

type HTTPFaultInjection_Delay_FixedDelay struct {
	// Add a fixed delay before forwarding the request. Format:
	// 1h/1m/1s/1ms. MUST be >=1ms.
	FixedDelay *durationpb.Duration `protobuf:"bytes,2,opt,name=fixed_delay,json=fixedDelay,proto3,oneof"`
}

func (*HTTPFaultInjection_Delay_FixedDelay) isHTTPFaultInjection_Delay_HttpDelayType() {}

type HTTPFaultInjection_Abort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Percent float64 `protobuf:"fixed64,1,opt,name=percent,proto3" json:"percent,omitempty"`
	// Types that are assignable to ErrorType:
	//
	//	*HTTPFaultInjection_Abort_HttpStatus
	//	*HTTPFaultInjection_Abort_GrpcStatus
	//	*HTTPFaultInjection_Abort_Http2Error
	ErrorType isHTTPFaultInjection_Abort_ErrorType `protobuf_oneof:"error_type"`
}

func (x *HTTPFaultInjection_Abort) Reset() {
	*x = HTTPFaultInjection_Abort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPFaultInjection_Abort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFaultInjection_Abort) ProtoMessage() {}

func (x *HTTPFaultInjection_Abort) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFaultInjection_Abort.ProtoReflect.Descriptor instead.
func (*HTTPFaultInjection_Abort) Descriptor() ([]byte, []int) {
	return file_pkg_apis_ctrlmesh_proto_faultinjection_proto_rawDescGZIP(), []int{3, 1}
}

func (x *HTTPFaultInjection_Abort) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (m *HTTPFaultInjection_Abort) GetErrorType() isHTTPFaultInjection_Abort_ErrorType {
	if m != nil {
		return m.ErrorType
	}
	return nil
}

func (x *HTTPFaultInjection_Abort) GetHttpStatus() int32 {
	if x, ok := x.GetErrorType().(*HTTPFaultInjection_Abort_HttpStatus); ok {
		return x.HttpStatus
	}
	return 0
}

func (x *HTTPFaultInjection_Abort) GetGrpcStatus() string {
	if x, ok := x.GetErrorType().(*HTTPFaultInjection_Abort_GrpcStatus); ok {
		return x.GrpcStatus
	}
	return ""
}

func (x *HTTPFaultInjection_Abort) GetHttp2Error() string {
	if x, ok := x.GetErrorType().(*HTTPFaultInjection_Abort_Http2Error); ok {
		return x.Http2Error
	}
	return ""
}

type isHTTPFaultInjection_Abort_ErrorType interface {
	isHTTPFaultInjection_Abort_ErrorType()
}

type HTTPFaultInjection_Abort_HttpStatus struct {
	// HTTP status code to use to abort the Http request.
	HttpStatus int32 `protobuf:"varint,2,opt,name=http_status,json=httpStatus,proto3,oneof"`
}

type HTTPFaultInjection_Abort_GrpcStatus struct {
	// GRPC status code to use to abort the request. The supported
	// codes are documented in
	// https://github.com/grpc/grpc/blob/master/doc/statuscodes.md Note: If
	// you want to return the status "Unavailable", then you should specify
	// the code as `UNAVAILABLE`(all caps), but not `14`.
	GrpcStatus string `protobuf:"bytes,3,opt,name=grpc_status,json=grpcStatus,proto3,oneof"`
}

type HTTPFaultInjection_Abort_Http2Error struct {
	// $hide_from_docs
	Http2Error string `protobuf:"bytes,4,opt,name=http2_error,json=http2Error,proto3,oneof"`
}

func (*HTTPFaultInjection_Abort_HttpStatus) isHTTPFaultInjection_Abort_ErrorType() {}

func (*HTTPFaultInjection_Abort_GrpcStatus) isHTTPFaultInjection_Abort_ErrorType() {}

func (*HTTPFaultInjection_Abort_Http2Error) isHTTPFaultInjection_Abort_ErrorType() {}

var File_pkg_apis_ctrlmesh_proto_faultinjection_proto protoreflect.FileDescriptor

var file_pkg_apis_ctrlmesh_proto_faultinjection_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x74, 0x72, 0x6c, 0x6d,
	0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x69,
	0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70,
	0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa4, 0x01, 0x0a, 0x15,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x17, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x17, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x22, 0x98, 0x02, 0x0a, 0x16, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x5a, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x81, 0x02,
	0x0a, 0x0e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4b, 0x0a, 0x13, 0x68, 0x74, 0x74, 0x70, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49,
	0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x68, 0x74, 0x74, 0x70, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a,
	0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x10,
	0x03, 0x22, 0xd4, 0x03, 0x0a, 0x12, 0x48, 0x54, 0x54, 0x50, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49,
	0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0x35, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x52,
	0x05, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x54,
	0x54, 0x50, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x72, 0x0a, 0x05, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0b,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x98, 0x01,
	0x0a, 0x05, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0b, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x72, 0x70,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x32,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x68, 0x74, 0x74, 0x70, 0x32, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x38, 0x0a, 0x0c, 0x4d, 0x75, 0x74, 0x69,
	0x52, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x10, 0x48, 0x54, 0x54, 0x50, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x10, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x31, 0x0a,
	0x09, 0x72, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x74, 0x69, 0x52, 0x65, 0x73,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x22, 0x81, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x65, 0x72, 0x62, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x65, 0x72, 0x62, 0x73, 0x2a, 0x37, 0x0a, 0x13, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x4f, 0x50, 0x45, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x01, 0x32, 0x50, 0x0a,
	0x0b, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x41, 0x0a, 0x0a,
	0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49,
	0x6e, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x42,
	0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b, 0x75,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x63, 0x74, 0x72, 0x6c, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_apis_ctrlmesh_proto_faultinjection_proto_rawDescOnce sync.Once
	file_pkg_apis_ctrlmesh_proto_faultinjection_proto_rawDescData = file_pkg_apis_ctrlmesh_proto_faultinjection_proto_rawDesc
)

func file_pkg_apis_ctrlmesh_proto_faultinjection_proto_rawDescGZIP() []byte {
	file_pkg_apis_ctrlmesh_proto_faultinjection_proto_rawDescOnce.Do(func() {
		file_pkg_apis_ctrlmesh_proto_faultinjection_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_apis_ctrlmesh_proto_faultinjection_proto_rawDescData)
	})
	return file_pkg_apis_ctrlmesh_proto_faultinjection_proto_rawDescData
}

var file_pkg_apis_ctrlmesh_proto_faultinjection_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_pkg_apis_ctrlmesh_proto_faultinjection_proto_goTypes = []interface{}{
	(FaultInjectionState)(0),         // 0: proto.FaultInjectionState
	(FaultInjection_Option)(0),       // 1: proto.FaultInjection.Option
	(*FaultInjectConfigResp)(nil),    // 2: proto.FaultInjectConfigResp
	(*FaultInjectionSnapshot)(nil),   // 3: proto.FaultInjectionSnapshot
	(*FaultInjection)(nil),           // 4: proto.FaultInjection
	(*HTTPFaultInjection)(nil),       // 5: proto.HTTPFaultInjection
	(*MutiRestRule)(nil),             // 6: proto.MutiRestRule
	(*HTTPMatchRequest)(nil),         // 7: proto.HTTPMatchRequest
	(*ResourceMatch)(nil),            // 8: proto.ResourceMatch
	(*HTTPFaultInjection_Delay)(nil), // 9: proto.HTTPFaultInjection.Delay
	(*HTTPFaultInjection_Abort)(nil), // 10: proto.HTTPFaultInjection.Abort
	(*v1.Time)(nil),                  // 11: k8s.io.apimachinery.pkg.apis.meta.v1.Time
	(*durationpb.Duration)(nil),      // 12: google.protobuf.Duration
}
var file_pkg_apis_ctrlmesh_proto_faultinjection_proto_depIdxs = []int32{
	3,  // 0: proto.FaultInjectConfigResp.faultInjectionSnapshots:type_name -> proto.FaultInjectionSnapshot
	0,  // 1: proto.FaultInjectionSnapshot.state:type_name -> proto.FaultInjectionState
	11, // 2: proto.FaultInjectionSnapshot.recoverTime:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.Time
	11, // 3: proto.FaultInjectionSnapshot.lastTransitionTime:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.Time
	5,  // 4: proto.FaultInjection.httpFaultInjections:type_name -> proto.HTTPFaultInjection
	1,  // 5: proto.FaultInjection.option:type_name -> proto.FaultInjection.Option
	9,  // 6: proto.HTTPFaultInjection.delay:type_name -> proto.HTTPFaultInjection.Delay
	10, // 7: proto.HTTPFaultInjection.abort:type_name -> proto.HTTPFaultInjection.Abort
	7,  // 8: proto.HTTPFaultInjection.match:type_name -> proto.HTTPMatchRequest
	8,  // 9: proto.HTTPMatchRequest.relatedResources:type_name -> proto.ResourceMatch
	6,  // 10: proto.HTTPMatchRequest.restRules:type_name -> proto.MutiRestRule
	12, // 11: proto.HTTPFaultInjection.Delay.fixed_delay:type_name -> google.protobuf.Duration
	4,  // 12: proto.FaultInject.SendConfig:input_type -> proto.FaultInjection
	2,  // 13: proto.FaultInject.SendConfig:output_type -> proto.FaultInjectConfigResp
	13, // [13:14] is the sub-list for method output_type
	12, // [12:13] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_pkg_apis_ctrlmesh_proto_faultinjection_proto_init() }
func file_pkg_apis_ctrlmesh_proto_faultinjection_proto_init() {
	if File_pkg_apis_ctrlmesh_proto_faultinjection_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaultInjectConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaultInjectionSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaultInjection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPFaultInjection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutiRestRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPFaultInjection_Delay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPFaultInjection_Abort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*HTTPFaultInjection_Delay_FixedDelay)(nil),
	}
	file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*HTTPFaultInjection_Abort_HttpStatus)(nil),
		(*HTTPFaultInjection_Abort_GrpcStatus)(nil),
		(*HTTPFaultInjection_Abort_Http2Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_apis_ctrlmesh_proto_faultinjection_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_apis_ctrlmesh_proto_faultinjection_proto_goTypes,
		DependencyIndexes: file_pkg_apis_ctrlmesh_proto_faultinjection_proto_depIdxs,
		EnumInfos:         file_pkg_apis_ctrlmesh_proto_faultinjection_proto_enumTypes,
		MessageInfos:      file_pkg_apis_ctrlmesh_proto_faultinjection_proto_msgTypes,
	}.Build()
	File_pkg_apis_ctrlmesh_proto_faultinjection_proto = out.File
	file_pkg_apis_ctrlmesh_proto_faultinjection_proto_rawDesc = nil
	file_pkg_apis_ctrlmesh_proto_faultinjection_proto_goTypes = nil
	file_pkg_apis_ctrlmesh_proto_faultinjection_proto_depIdxs = nil
}
