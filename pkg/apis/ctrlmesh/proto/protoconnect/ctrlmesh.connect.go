// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pkg/apis/ctrlmesh/proto/ctrlmesh.proto

package protoconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	proto "github.com/KusionStack/controller-mesh/pkg/apis/ctrlmesh/proto"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ControllerMeshName is the fully-qualified name of the ControllerMesh service.
	ControllerMeshName = "proto.ControllerMesh"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ControllerMeshRegisterProcedure is the fully-qualified name of the ControllerMesh's Register RPC.
	ControllerMeshRegisterProcedure = "/proto.ControllerMesh/Register"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	controllerMeshServiceDescriptor        = proto.File_pkg_apis_ctrlmesh_proto_ctrlmesh_proto.Services().ByName("ControllerMesh")
	controllerMeshRegisterMethodDescriptor = controllerMeshServiceDescriptor.Methods().ByName("Register")
)

// ControllerMeshClient is a client for the proto.ControllerMesh service.
type ControllerMeshClient interface {
	Register(context.Context) *connect.BidiStreamForClient[proto.ProxyStatus, proto.ProxySpec]
}

// NewControllerMeshClient constructs a client for the proto.ControllerMesh service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewControllerMeshClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ControllerMeshClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &controllerMeshClient{
		register: connect.NewClient[proto.ProxyStatus, proto.ProxySpec](
			httpClient,
			baseURL+ControllerMeshRegisterProcedure,
			connect.WithSchema(controllerMeshRegisterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// controllerMeshClient implements ControllerMeshClient.
type controllerMeshClient struct {
	register *connect.Client[proto.ProxyStatus, proto.ProxySpec]
}

// Register calls proto.ControllerMesh.Register.
func (c *controllerMeshClient) Register(ctx context.Context) *connect.BidiStreamForClient[proto.ProxyStatus, proto.ProxySpec] {
	return c.register.CallBidiStream(ctx)
}

// ControllerMeshHandler is an implementation of the proto.ControllerMesh service.
type ControllerMeshHandler interface {
	Register(context.Context, *connect.BidiStream[proto.ProxyStatus, proto.ProxySpec]) error
}

// NewControllerMeshHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewControllerMeshHandler(svc ControllerMeshHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	controllerMeshRegisterHandler := connect.NewBidiStreamHandler(
		ControllerMeshRegisterProcedure,
		svc.Register,
		connect.WithSchema(controllerMeshRegisterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.ControllerMesh/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ControllerMeshRegisterProcedure:
			controllerMeshRegisterHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedControllerMeshHandler returns CodeUnimplemented from all methods.
type UnimplementedControllerMeshHandler struct{}

func (UnimplementedControllerMeshHandler) Register(context.Context, *connect.BidiStream[proto.ProxyStatus, proto.ProxySpec]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("proto.ControllerMesh.Register is not implemented"))
}
